package com._01_regularExpression;

// 正则表达式
//
// (1)将字符串与正则表达式字符串比较
//  方法：字符串.matches(正则字符串);
//  返回值：boolean
//
//
//
// (2)正则表达式
//  （可以在API文档中搜素Pattern来查看更多正则表达式的规则）
//  注意事项：
//      1.正则表达式中的如\d，\w：它们【不是转义字符】，\d是两个char（'\'+'d'）
//        因此，在java中，实际应该写成【\\d，\\w】的形式（\\是转义字符，表示'\'）
//      2.java的正则表达式，规则和python、html中完全一致，以下为python中的笔记
//
//  (Ⅰ) 单字符匹配：
//  ————————————————————————————————————————————————————————————————-———————————————————
//  字符 | 功能
//  .   | 匹配任意一个字符(除了\n)，\.匹配点本身
//  []  | 匹配[]中列举的字符； []内可以写：[a-zA-Z0-9]这三种范围组合，或者指定单个字符[acgDF135]
//  \d  | 匹配数字，即0-9
//  \D  | 匹配非数字
//  \s  | 匹配空白，即空格、Tab键
//  \S  | 匹配非空白
//  \w  | 匹配单词字符，即a-z、A-Z、0-9、_   注意：不光字母数字，还包含下划线
//  \W  | 匹配非单词字符
//  —————————————————————————————————————————————————————————————————————————————————————
//
//  (Ⅱ)数量匹配
//  —————————————————————————————————————————————————————————————————————————————————————————————
//  字符   | 功能
//  *     | 匹配前一个规则的字符出现0至无穷次    \d* 表示数字可以有0个到∞个
//  +     | 匹配前一个规则的字符出现1至无穷次    \d+ 表示[1,∞)
//  ?     | 匹配前一个规则的字符出现0次至1次     \d? 表示1个数字，或者没有数字
//  {m}   | 匹配前一个规则的字符出现m次         \d{m} 表示数字出现m次
//  {m,}  | 匹配前一个规则的字符出现至少m次      \d{m,} 表示数字出现[m,∞)次
//  {m,n} | 匹配前一个规则的字符出现m到n次      \d{m,n} 表示数字出现[m,n]次 【注意：m,n 逗号后不要写空格】
//  —————————————————————————————————————————————————————————————————————————————————————————————
//
//  (Ⅲ)边界匹配
//  ——————————————————————————————
//  字符 | 功能
//  ^   | 从被匹配字符串的开头 进行匹配
//  $   | 一直匹配到 被匹配字符串的结尾
//  \b  | 匹配一个单词的边界
//  \B  | 匹配非单词边界
//  ——————————————————————————————
//
//  (Ⅳ)分组匹配
//  ———————————————————————————————
//  字符 | 功能
//  |   | 匹配左右任意一个表达式    如：(abc|bcd|def)，表示在abc\bcd\def中任选一个
//  ()  | 将括号中字符作为一个分组   如：(_\w+)* 表示将括号内的一组内容，写[0,∞]次
//  ———————————————————————————————
//
//
//
//  (3)案例：
//  1.匹配QQ号，要求纯数字，长度5-11，第一位不为0
//    r = "^[1-9]\\d{4,10}$"
//      注意：可以把各种拼起来表示一句规则；[1-9]表示第一位数字，\\d{4,10}表示后面的数字，^$表示从头到尾匹配
//
//  2.匹配邮箱地址，只允许qq|163|gmail这三种邮箱地址
//    邮箱格式可以为 123.qwe.1_2.a-b.…@qq.com.cn.eu.qq.…
//    r = "^[\\w-]+(\\.[\\w-]+)*@(qq|163|gmail)(\\.[\\w-]+)+$"
//      解释：将上面逐步拆分 ^  [\w-]+  (\.[\w-]+)*  @  (qq|163|gmail)  (\.[\w-]+)+  $ 解释如下：
//      ①[\w-]+  :将[]内的\w或-重复[1,∞次)
//      ②(\.[\w-]+)*  :将\.和[\w-]+用()变为一个整体，重复[0,∞)次
//      ③(qq|163|gmail)  :qq、163、gmail三选一
//      ④(\.[\w-]+)+  :将(\.[\w-]+)重复[1,∞)次
//      ⑤将上述依次拼起来，并^$从头到尾


public class RegularExpression {
    public static void main(String[] args) {
        // 1.六位数字
        String regularStr1 = "^\\d{6}$";
        System.out.println("123456".matches(regularStr1));// true
        System.out.println();

        // 2.邮箱格式
        String regularStr2 = "^\\w+(\\.\\w+)*@(163|126)(\\.\\w+)+$";// 不含'-'符号
        String regularStr3 = "^[\\w-]+(\\.[\\w-]+)*@(qq|163|gmail)(\\.[\\w-]+)+$";// 含'-'符号
        System.out.println("asdf1234.qwer5678@163.com.cn".matches(regularStr2));// true
        System.out.println("asd-f1234.qwer-5678@163.com.cn".matches(regularStr2));// false
        System.out.println("asd-f1234.qwer-5678@163.com.cn".matches(regularStr3));// true
        System.out.println();

        // 3.三位数字或三位小写字母
        String regularStr4 = "^\\d{3}|[a-z]{3}$";
        System.out.println("asd".matches(regularStr4));// true
        System.out.println("123".matches(regularStr4));// true
        System.out.println("4444".matches(regularStr4));// false
        System.out.println("q1w".matches(regularStr4));// false
    }
}
