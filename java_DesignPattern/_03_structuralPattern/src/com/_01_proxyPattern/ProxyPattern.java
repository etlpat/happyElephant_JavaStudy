package com._01_proxyPattern;

// 代理模式
//
//
// 0.结构型模式
//  结构型模式描述如何将类或对象按某种布局组成更大的结构。
//  它分为类结构型模式和对象结构型模式,前者采用继承机制来组织接口和类,后者采用组合或聚合来组合对象。
//  由于组合关系或聚合关系比继承关系耦合度低,满足“合成复用原则”,所以对象结构型模式比类结构型模式具有更大的灵活性。
//
//
// 1.代理模式介绍
//  有时由于某些原因，需要给某一个对象提供一个代理，并由代理对象控制对原本对象的引用。
//  加入代理对象后，就不再需要直接引用原本的对象，而是将代理对象作为中介使用。
//      （Java中的代理按照代理类生成时机不同又分为静态代理和动态代理。）
//      （静态代理代理类在编译期就生成,而动态代理代理类则是在Java运行时动态生成。）
//      （动态代理又有JDK代理和CGLib代理两种。）
//
//
// 2.结构
//  代理(Proxy)模式分为三种角色:
//      抽象主题(Subject)类:通过接口或抽象类声明[真实主题]和[代理对象]实现的业务方法。
//      真实主题(Real Subject)类:实现了抽象主题中的具体业务,是代理对象所代表的真实对象,是最终要引用的对象。
//      代理(Proxy)类:提供了与真实主题相同的接口,其内部含有对真实主题的引用,它可以访问、控制或扩展真实主题的功能。
//  注意：
//      代理类中，可以将真实主题类对象作为属性，方便其访问真实主题类的方法。
//
//
// 3.优缺点
//  优点:
//      代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用;
//      代理对象可以扩展目标对象的功能;
//      代理模式能将客户端与目标对象分离,在一定程度上降低了系统的耦合度;
//  缺点:
//      增加了系统的复杂度;
//

public class ProxyPattern {
}
