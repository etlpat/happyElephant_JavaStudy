package com._01_designPatternBasic;

// java设计模式
//
//
// 1.设计模式概念
//      软件设计模式(Software Design Pattern),又称设计模式,是一套被反复使用、多数人知晓的、
//      经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题,
//      以及该问题的解决方案。也就是说,它是解决特定问题的一系列套路,是前辈们的代码设计经验的总结,
//      具有一定的普遍性,可以反复使用。
//
//
//
// 2.设计模式的分类
//  (1)创建型模式
//      用于描述如何创建对象，将对象的创建和使用分离。
//      如：单例、原型、工厂方法、抽象工厂、建造者等5种创建型模式。
//
//  (2)结构型模式
//      用于描述如何将类或对象按照某种布局组成更大的结构。
//      如：代理、适配器、桥接、装饰、外观、享元、组合等7种结构型模式。
//
//  (3)行为型模式
//      用于描述类或对象之间怎样相互协作，共同完成单个对象无法单独完成的任务，以及怎样分配职责。
//      如：模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等11种行为型模式。
//
//
//
// 3.软件设计原则
//  在软件开发的过程中，为了保证软件的[可维护性、可复用性、可扩展性、灵活性]，程序员要尽量遵守一下6个原则。
//  (1)开闭原则
//      开闭原则：对拓展开放，对修改关闭。
//          即：在代码需要扩展时，不去修改原有的代码，实现热插拔的效果。
//          （多使用接口、抽象类来达到开闭原则）
//
//  (2)里氏代换原则
//      里氏代换原则：任何父类可以出现的地方，子类一定可以出现。（父类引用可以指向子类对象）
//      注意：过多次数的方法重写，可能导致动态绑定过于复杂/逻辑混乱，使得体系的可复用性变差。
//
//  (3)依赖倒转原则
//      依赖倒转原则：高层模块不应依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。
//      简单来说：少用具体类的引用，多用其抽象父类的引用。利用多态，父类引用指向子类对象，其中父类用抽象类/接口。
//              这样降低了模块间的耦合
//
//  (4)接口隔离原则
//      接口隔离原则：客户端不应被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。
//      简单来说：就是把不用的方法从接口中隔离出去（拆分成功能更细致的接口），减少功能冗余。
//
//  (5)迪米特法则
//      迪米特法则：又称“最少知识原则”。只跟你的直接朋友交谈，不跟陌生人说话。
//      即：如果两个模块无须直接通信，那么就不应该发生直接的相互调用，可以通过第三方中转该调用。（解耦，提升独立性）
//          （添加中间类，联系两个无关的类）
//
//  (6)合成复用原则
//      合成复用原则：优先使用关联/依赖关系来实现复用，其次再考虑继承关系来实现复用。
//      （关联/依赖关系耦合度低、封装性强、灵活性高；继承耦合度高、封装性相对弱、灵活性低）
//


public class DesignPatternBasic {
}
