package com._02_simpleFactoryPattern;


// 简单工厂模式
//
// 1.前言
//  在java中,万物皆对象,这些对象都需要创建,如果创建的时候直接nv该对象,就会对该对象耦合严重,假如我们要更换对象,所有
//  new对象的地方都需要修改一遍,这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象,我们就只和工厂打交道就可以了,
//  彻底和对象解耦,如果要更换对象,直接在工厂里更换该对象即可,达到了与对象解耦的目的;所以说,工厂模式最大的优点就是:解耦。
//
//
// 2.介绍
//  简单工厂模式，通常定义一个具体工厂类，用于创建其它类的实例，被创建的实例通常具有共同的父类。
//  简单工厂模式中，可以根据参数的不同返回不同类的实例。
//
//
// 3.结构
//  简单工厂包含如下角色:
//      (1)抽象产品:定义了产品的规范,描述了产品的主要特性和功能。
//      (2)具体产品:实现或者继承抽象产品的子类
//      (3)具体工厂:提供了创建产品的方法,调用者通过该方法来获取产品。
//
//
// 4.优缺点
//  优点：封装了对象的创建过程，将对象的创建与业务逻辑分开，减少耦合，避免在业务层对创建对象部分代码的修改。
//  缺点：具体工厂违法开闭原则，扩展时仍然需要修改工厂中的代码。
//


public class SimpleFactoryPattern {
}
