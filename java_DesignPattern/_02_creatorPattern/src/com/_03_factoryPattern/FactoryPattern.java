package com._03_factoryPattern;


// 工厂方法模式
//
// 1.工厂模式介绍
//  工厂模式中，父类工厂用于定义创建产品对象的公共接口，而子类工厂负责生成具体的产品对象。
//  这样可以将产品类的实例化操作延迟到子类工厂中完成，由子类工厂决定具体实例化哪个具体产品类。
//
//
// 2.结构
//  工厂方法模式的主要角色:
//      (1)抽象工厂(Abstract Factory):提供了创建产品的接口,调用者通过它访问具体工厂的工厂方法来创建产品。
//      (2)具体工厂(ConcreteFactory):主要是实现抽象工厂中的抽象方法,完成具体产品的创建。
//      (3)抽象产品(Product):定义了产品的规范,描述了产品的主要特性和功能。
//      (4)具体产品(ConcreteProduct):实现了抽象产品角色所定义的接口,由具体工厂来创建,它同具体工厂之间一一对应。
//  【工厂模式：具体工厂与具体产品一一对应】
//
//
// 3.优缺点
//  优点：用户只需要知道具体工厂的名称就可以获取对应的产品，无需知道具体创建过程。
//      符合开闭原则，想创建新的对象，添加对应的新工厂即可，无需修改原有代码。
//  缺点：每增加一个产品，就要增加一个具体工厂类，这增加了系统的复杂度。
//

public class FactoryPattern {
}
