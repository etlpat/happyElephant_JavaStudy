// static method：静态方法


// 类方法(静态方法)
//
// (1)语法
// 定义语法：
//  1.访问修饰符 static 返回类型 方法名(形参列表){方法体} //（推荐）
//  2.static 访问修饰符 返回类型 方法名(形参列表){方法体}
// 调用语法：
//  1.类名.方法名(实参列表); //（推荐）
//  2.对象.方法名(实参列表);
//
//
// (2)特点
//  1.静态方法是类级别的方法，它们属于类本身，而不是属于某一个对象实例 （因此可以通过类名直接访问）
//  2.【静态方法中只能调用静态属性和静态方法，不能调用非静态成员】
//  3.静态方法中无this、super对象（因此不能直接调用非静态成员）
//   （静态方法中不允许使用和对象实例相关的关键字）
//  4.静态方法和静态成员、普通方法一样，都是随着类加载而加载
//
//
//
// (3)注意事项
//  1.使用场景：当方法中不涉及到任何对象相关的成员时，可以将其设计为静态方法，提高开发效率
//      如：设计工具类中的方法（可以不创建实例，直接通过类调用方法）
//         Math.sqrt(18);
//
//  2.普通方法中可以访问静态成员，但静态方法中不能访问普通成员
//
//  3.由于静态方法中无this、super对象，因此不能直接调用非静态成员
//   （普通方法中，所有的非静态成员都是通过this、super调用）
//    但是，凡是不用this、super的操作，静态方法都可以完成。如创建对象，然后调用对象的方法、属性等。




package com._02_staticMethod;

public class StaticMethod {
    public static void main(String[] args) {
        // 测试静态方法
        Student.printTotalFee();// 总学费为：0.0

        Student stu1 = new Student("南山", 5000);// 交费成功
        stu1.printTotalFee();// 总学费为：5000.0

        Student stu2 = new Student("海哥", 1600);// 交费成功
        stu2.printTotalFee();// 总学费为：6600.0
        stu1.printTotalFee();// 总学费为：6600.0

        Student.printTotalFee();// 总学费为：6600.0


        // 调用static工具方法
        int[] arr1 = new int[]{1, 2, 3, 4, 5};
        int[][] arr2 = new int[][]{{1, 2, 3}, {4, 5}, {6}, {7, 8, 9, 0}};
        // 设计工具类时，建议使用静态方法，可以通过类名直接调用方法
        MyTools.printArr(arr1);// {1, 2, 3, 4, 5}
        System.out.println();
        MyTools.printArr(arr2);// {{1, 2, 3}, {4, 5}, {6}, {7, 8, 9, 0}}
    }
}
