// singleton design pattern：单例设计模式


// 单例设计模式
//
// (0)前言
//  Java有众多设计模式，目前公认的有23种
//  如：单例模式、观察者模式、工厂模式、适配器模式、装饰者模式、代理模式、模板模式、职责链模式...
//  其中，单例模式就是最简单的设计模式之一
//
//
// (1)概念
//  单例模式：保证整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法
//  单例模式的两种方式：饿汉式/懒汉式
//
//
// (2)饿汉式和懒汉式
//  1.饿汉式：在加载类时直接为static对象开辟空间并初始化
//    懒汉式：类加载时先创建值为null的静态引用，在首次调用getInstance方法时才为其开辟空间并初始化
//  2.二者区别在于：创建对象的时机不同。饿汉式在类加载时就创建，而懒汉式在调用getInstance方法时才创建
//  3.饿汉式不存在线程安全问题，但是懒汉式存在线程安全问题。
//  4.饿汉式存在浪费资源的可能（还没获取对象就先创建了），而懒汉式不存在这个问题
//  5.在我们JavaSE标准类中，java.lang.Runtime就是经典的单例模式
//
//
//
// (3)注意事项
//  1.单例：即单个实例。
//    单例模式在程序运行的整个流程中，仅创建并使用一个对象实例
//
//  2.应用场景：某些较为重量级的对象，占用系统性能较大，并只需要一个，此时就使用单例设计模式