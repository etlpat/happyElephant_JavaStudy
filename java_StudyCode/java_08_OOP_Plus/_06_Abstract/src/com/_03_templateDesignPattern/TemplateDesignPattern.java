// Template design pattern：模板设计模式


// 模板设计模式
//
//
// (1)步骤：
//  1.定义抽象父类(模板)：将方法的公共代码提取到非抽象的方法中，可以在该方法中调用抽象方法
//  2.在子类中实现抽象方法：不同子类实现的抽象方法不同，同一模板可以进行不同的操作
//
//
// (2)特点：
//  1.封装不变部分：通过抽象父类定义算法的骨架，而具体实现由子类提供。这样可以有效地封装不变部分，使得算法的修改不会影响到使用该算法的其他类。
//  2.扩展可变部分：模板设计模式通过将可变部分推迟到子类中实现，使得子类可以方便地扩展算法的可变部分，而不需要修改父类的代码。
//  3.提取公共代码：模板设计模式可以提取公共代码，将这些公共代码放在一个或多个基本方法中，便于维护和重用。
//  4.行为由父类控制，子类实现：模板设计模式的行为是由父类控制的，子类只需要实现父类中定义的具体方法即可。这样可以保证算法的一致性和完整性。