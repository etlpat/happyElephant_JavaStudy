// finalize：最后决定

// finalize方法（属于Object类）
//
// (1)功能
//  当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用finalize方法
//  简单的说：在对象销毁前，系统自动调用finalize方法（类似于C++析构函数）
//
//  注意：Object中的finalize方法，是空实现。
//       程序员可以重写该方法，来实现自己的业务逻辑（如释放资源、打开文件夹等）（实际用的少）
//
//
//
// (2)细节
//  1.在对象被垃圾回收器销毁前，系统自动调用该对象的finalize方法。
//   （子类可以重写此方法，做一些释放资源的操作）
//
//  2.对象何时被回收？
//    【若对象不存在引用】，JVM会认为该对象是垃圾对象，稍后将其销毁
//    注意：垃圾回收器会销毁没有引用的对象，但并非立马销毁，而是有一套自己的算法
//    在销毁该对象前，会先调用finalize()
//
//  3.垃圾回收器的调用，由系统来决定（会销毁无引用的对象）
//    也可以通过System.gc()手动调用垃圾回收器




package com._04_finalize;

public class Finalize_ {
    public static void main(String[] args) {
        Car car = new Car("大众");
        car = null;
        // 注意：垃圾回收器会销毁没有引用的对象，但并非立马销毁，而是有一套自己的算法
        //      finalize()会在对象被销毁前调用


        // 手动调用垃圾回收器
        System.out.println("##########");
        System.gc();
        System.out.println("**********");
        // 输出结果：（由于垃圾回收器的调用不会阻塞程序的运行，因此并非在两个分割线之间调用finalize()）
//        ##########
//        **********
//        Car的finalize()被调用...
    }
}
