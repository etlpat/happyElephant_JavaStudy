// override：重写/覆盖


// 方法的重写
//
// (1)概念
//  简单的说：方法的重写就是子类有一个方法，和父类中某个方法的方法名、返回
//  类型、参数列表都一样，那么我们就说子类的方法“覆盖”了父类的方法
//
//
// (2)重写的规则
//  1.【方法名和参数列表】：必须一致
//  2.【返回类型】：一致，或者子类方法的返回类型是父类方法返回类型的子类
//               (如：父类方法返回类型Object，子类方法返回类型可以是String)
//  3.【访问权限】：不能更加严格，即子类方法不能缩小父类方法的访问权限
//               (如：父类方法权限为protected，子类方法权限可以为public或protected)
//
//
// (3)重载和重写
//  1.对比二者的规则：
//      重载：方法名必须一致，参数列表必须不一致，返回类型、访问权限不做要求
//      重写：方法名、参数列表必须一致，返回类型必须一致或返回子类、访问权限不能更严格
//  2.发生范围：
//      重载：一般在本类中 (注意：父子类间也能重载方法，但是一般不这么写)
//      重写：父子类中
//  3.二者无直接关系：
//      重载和重写是两个独立的概念，二者之间不会直接相互影响。
//      若对多个重载方法中的某个进行重写，不会影响其他重载方法的调用。访问仍遵循查找关系。
//
//
//
// (4)注意事项：
//  1.子类重写父类方法后，【父类的方法依然存在于内存中】
//    方法重写不是真的覆盖，访问时额、仍遵循查找关系
//
//  2.子类并非只能重写直接父类的方法，也可以重写爷爷类的方法




package com._06_override;

public class Override {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat();
        dog.eat("小花");

        dog.sleep();
        dog.sleep("小白");

        dog.func();
    }
}
