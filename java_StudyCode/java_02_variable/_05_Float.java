

// 浮点数的分类：
// 类型		大小		范围
// float 	4 		-3.403e38 ~ 3.403e38
// double	8 		-1.798e308 ~ 1.798e308



// 浮点数类型：
// 1.浮点数在机器中的存放形式：
// 	 浮点数 = 符号位 + 指数位 + 尾数位
//
// 2.java浮点型常量默认类型是double，声明float常量，必须后面加上'f'或'F'
//   因此通常情况下，我们使用double型变量
//
// 3.进行计算后，尾数部分可能丢失，造成精度缺失（小数都是近似值）
//   例如：3.3 / 3 != 1.1
//   因此：当我们对小数进行过运算(尤其是除法)，不要进行==比较
//   
// 4.浮点型的两种表示方法：
//   普通表示法：5.12  512.0f  .512 (必须有小数点)
//   科学计数法：5.12e2(=5.12*10^2)  5.12E-2（e后面表示10的次方数）





public class _05_Float{
	public static void main(String[] args){

		float a = 1.1f;
		double b = 1.1;
		double c = 1.1f;// float类型数据可以存入double型变量中
		//float d = 1.1;// 报错，1.1默认是double型，无法存入float中
		//
		//注意：java允许内存小的数据存入内存大的变量中，如float数据存入double变量，会自动补0
		//     java不允许内存大的数据存入小的空间中，如double数据存入float变量，会报错，丢失精度（C++中会自动截断，但java报错）			


		double e = .514;// 相当于0.514


		double f = 3.3 / 3;
		double g = 1.1;
		System.out.println(f == g);// false
		System.out.println(f);// 1.0999999999999999
		// g就是1.1，但是由于二进制计算问题，f/3只是近似于1.1
		
		// 当两小数的差值的绝对值很小，就可以认为相等：
		if(Math.abs(f - g) < 0.000001){
			System.out.println("相等");// 相等
		}

	}
} 