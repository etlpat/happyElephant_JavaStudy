// binary：二进制



// 四种进制：
// 1.二进制：(0,1)，以0b或0B开头
// 2.十进制：(0~9)
// 3.八进制：(0~7)，以0开头
// 4.十六进制：(0~9,A~F/a~f)，以0x或0X开头
// 
// 注意:
// 	 无论用几进制输入数据，内存中存储的都是二进制，默认输出到屏幕上的都是10进制



public class _08_Binary{
	public static void main(String[] args) {
		
		int n1 = 0b1010;// 二进制
		int n2 = 1010;// 十进制
		int n3 = 01010;// 八进制
		int n4 = 0x1010;// 十六进制

		System.out.println(n1);// 10
		System.out.println(n2);// 1010
		System.out.println(n3);// 520
		System.out.println(n4);// 4112
	}
}




// 进制间的转换：
// 
// (1)：2/8/16进制转10进制
// 转换规则：从最低位(右边)开始，将每个位上的数提取出来，乘以2/8/16的(位数-1)次方，然后求和
// e.g.
// 2进制转10进制：0b111 = 1*2^0 + 1*2^1 + 1*2^2 = 7
// 8进制转10进制：0234 = 4*8^0 + 3*8^1 + 2*8^2 = 156
// 16进制转10进制：0x1AF = 15*16^0 + 10*16^1 + 1*16^2 = 431
// 
// 
// 
// (2)：10进制转2/8/16进制
// 转换规则：将10进制的数不断除以2/8/16，直到商为0为止，然后将每步得的余数倒过来，就是对应的2/8/16进制
// e.g.
// 10进制转2进制：34 -> 余数：010001 => 0b0010 0010
// 10进制转8进制：34 -> 余数：24 => 042
// 10进制转16进制：34 -> 余数：22 => 0x22
// 
// 
// 
// (3)：2进制转8/16进制
// 转换规则：从低位开始，将2进制数的每3/4位一组，转成对应的8/16进制数即可
// e.g.
// 2进制转8进制：0b11010101 = 0325
// 2进制转16进制：0b11010101 = 0xD5
// 
// 
// 
// (4)：8/16进制转2进制
// 转换规则：将8/16进制数的每一位数，转成对应的3/4位的2进制数即可
// e.g.
// 8进制转2进制：0237 = 0b1001 1111
// 16进制转2进制：0x23B = 0b0010 0011 1011






// 原码、反码、补码
// 
// 注意：
// java中没有无符号数，任何数都是有符号的
// 数据以【补码】的形式存放到计算机中，运算时也以补码形式运算
// 我们所看到的数据/运算结果，都是源码
// 
// 
// 存储规则：
// 1.正数：最高位是0
// 	      原码 = 反码 = 补码
// 		    
// 2.负数：最高位是1
// 		  反码 = 原码符号位不变，其他位取反
// 		  补码 = 反码 + 1
// 		  反码 = 补码 - 1
// 	
// 3.零：0的补码、反码都是0	
