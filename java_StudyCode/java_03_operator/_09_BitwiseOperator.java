// bitwise operator： 位运算符




// 位运算符：
// 操作数是整数类型，将其转换为二进制反码进行位运算
// 注意：数据在进行位运算时，以补码形式进行运算
// 
// 
// &：按位与		(全1才为1)
// |：按位或 	(有1就为1)
// ^：按位异或 	(同0异1)
// ~：按位取反	(1->0,0->1，符号位也取反)
// 
// >>：算数右移	(低位溢出，符号位不变，并用符号位补溢出的高位)
// <<：算数左移	(符号位不变，低位补0)
// >>>：逻辑/无符号右移	(低位溢出，高位补0)





public class _09_BitwiseOperator {
	public static void main(String[] args) {

		System.out.println(2 & 3);// 2
		// 0b 00000000 00000000 00000000 00000010  =  2(补)
		// 0b 00000000 00000000 00000000 00000011  =  3(补)
		// 0b 00000000 00000000 00000000 00000010  =  2&3(补)

		System.out.println(~-2);// 1
		// 0b 10000000 00000000 00000000 00000010  =  -2(原)
		// 0b 11111111 11111111 11111111 11111101  =  -2(反)
		// 0b 11111111 11111111 11111111 11111110  =  -2(补)
		// 0b 00000000 00000000 00000000 00000001  =  ~-2(补)

		System.out.println(~2);// -3
		// 0b 00000000 00000000 00000000 00000010  =  2(补)
		// 0b 11111111 11111111 11111111 11111101  =  ~2(补)
		// 0b 11111111 11111111 11111111 11111100  =  ~2(反)
		// 0b 10000000 00000000 00000000 00000011  =  ~2(原)

		System.out.println(2 | 3);// 3
		// 0b 00000000 00000000 00000000 00000010  =  2(补)
		// 0b 00000000 00000000 00000000 00000011  =  3(补)
		// 0b 00000000 00000000 00000000 00000011  =  2|3(补)

		System.out.println(2 ^ 3);// 1
		// 0b 00000000 00000000 00000000 00000010  =  2(补)
		// 0b 00000000 00000000 00000000 00000011  =  3(补)	
		// 0b 00000000 00000000 00000000 00000001  =  2^3(补)
		
		System.out.println(4 >> 2);// 1，相当于4/2/2
		// 0b 00000000 00000000 00000000 00000100  =  4(补)
		// 0b 00000000 00000000 00000000 00000001  =  4>>2(补)
		
		System.out.println(-1 >> 2);// -1  
		// 0b 11111111 11111111 11111111 11111111  =  -1(补)
		// 0b 11111111 11111111 11111111 11111111  =  -1>>2(补)

		System.out.println(4 << 2);// 16，相当于4*2*2
		// 0b 00000000 00000000 00000000 00000100  =  4(补)
		// 0b 00000000 00000000 00000000 00010000  =  4<<2(补)
		
		System.out.println(-1 >>> 1);// 2^32-1 
		// 0b 11111111 11111111 11111111 11111111  =  -1(补)
		// 0b 01111111 11111111 11111111 11111111  =  -1>>>1(补)
	}
}