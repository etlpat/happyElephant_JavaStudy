// expression evaluation：表达式求值
//
// (1)表达式分类：
//  1.前缀表达式
//  2.中缀表达式
//  3.后缀表达式
//
//
//
//
// (2)中缀表达式
// 1.概念
//  中缀表达式：运算符在两个操作数中间
//  是平时最常见的表达式
//  e.g.((15/(7-(1+1)))*3)-(2+(1+1))
//
// 2.组成部分
//  操作数（即数字）、运算符（即+-*/）、界限符（即括号）
//
// 3.左优先原则
//  计算机中进行表达式运算，遵循左优先原则
//  左优先原则：表达式整体从左到右算，遇到括号再优先算括号中的内容
//
// 4.中缀表达式 转 前/后缀表达式
//  步骤：①确定各运算符生效顺序
//       ②选择最优先计算的子表达式，转化为前/后缀的顺序（之后将该转化完的表达式看为整体即可）
//       ③继续重复②，直到转化完全部表达式为止
//
//  e.g.((15/(7-(1+1)))*3)-(2+(1+1))转化表达式：
//  前缀：-(*(/15(-7(+(1)(1))))3)(+2(+(1)(1))) // 前缀：运算符从右到左的顺序，就是中序运算符的优先级顺序
//  后缀：15(7)(1)(1)+-/3*2(1)(1)++-           // 后缀：运算符从左到右的顺序，就是中序运算符的优先级顺序（因此可脱括号）
//
//
//
//
// (3)后缀表达式
// 1.概念
//  后缀表达式：运算符在两个操作数后边
//  e.g.ab+     （等价于中缀：a+b）
//      ab+c-   （等价于中缀：a+b-c）（ab+c- <=> (ab+)c-，将前面看为一个整体）
//      abc-+   （等价于中缀：a+b-c）（abc-+ <=> a(bc-)+）
//      ab+cd*- （等价于中缀：a+b-c*d）
//
//  2.应用
//  将中缀表达式按照【左优先】的顺序转化为后缀表达式，后缀表达式运算符从左到右的顺序就表示对应中缀表达式运算符的优先级顺序
//  e.g. ((15/(7-(1+1)))*3)-(2+(1+1)) => 15 7 1 1 + - / 3 * 2 1 1 + + -
//  按照上面 +-/*++- 从左到右的顺序，运算其操作数，即可达到中序运算的效果
//
//
//
//
// (4)前缀表达式
// 1.概念
//  前缀表达式：运算符在两个操作数前边
//  e.g.+ab     （等价于中缀：a+b）
//      -+abc   （等价于中缀：a+b-c）（-+abc <=> -(+ab)c）
//      +a-bc   （等价于中缀：a+b-c）（+a-bc <=> +a(-bc)）
//      -+ab*cd （等价于中缀：a+b-c*d）


// 表达式求值的具体实现思路，以及代码实现步骤，见test01.Test